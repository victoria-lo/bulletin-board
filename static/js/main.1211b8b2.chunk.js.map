{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomColor","require","App","useState","item","setItem","JSON","parse","localStorage","getItem","items","setItems","newitem","trim","id","uuidv4","color","luminosity","defaultPos","x","y","alert","useEffect","stringify","className","value","onChange","e","target","placeholder","onKeyPress","event","keyCode","which","onClick","map","index","key","defaultPosition","onStop","data","newArr","updatePos","style","backgroundColor","margin","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAIIA,EAAcC,EAAQ,IAkFXC,MAhFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBACxBG,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAHlC,mBAENC,EAFM,KAECC,EAFD,KAMPC,EAAU,WACd,GAAoB,KAAhBR,EAAKS,OAAe,CACtB,IAAMD,EAAU,CACdE,GAAIC,cACJX,KAAMA,EACNY,MAAOhB,EAAY,CACjBiB,WAAY,UAEdC,WAAY,CAAEC,EAAG,IAAKC,EAAG,IAE3BT,GAAS,SAACD,GAAD,4BAAeA,GAAf,CAAsBE,OAC/BP,EAAQ,SAERgB,MAAM,gBACNhB,EAAQ,KAyBZ,OAdAiB,qBAAU,WACRd,aAAaH,QAAQ,QAASC,KAAKiB,UAAUb,MAC5C,CAACA,IAaF,yBAAKc,UAAU,OACb,yBAAKV,GAAG,YACN,2BACEW,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAQsB,EAAEC,OAAOH,QAClCI,YAAY,qBACZC,WAAY,SAACH,GA5BJ,IAACI,EAEH,OAFGA,EA4BkBJ,GA3BjBK,SAAWD,EAAME,QAEhCrB,OA2BE,4BAAQsB,QAAStB,GAAjB,UAEF,yBAAKE,GAAG,SACLJ,EAAMyB,KAAI,SAAC/B,EAAMgC,GAChB,OACE,kBAAC,IAAD,CACEC,IAAKjC,EAAKU,GACVwB,gBAAiBlC,EAAKc,WACtBqB,OAAQ,SAACZ,EAAGa,IA3BN,SAACA,EAAMJ,GACvB,IAAIK,EAAM,YAAO/B,GACjB+B,EAAOL,GAAOlB,WAAa,CAAEC,EAAGqB,EAAKrB,EAAGC,EAAGoB,EAAKpB,GAChDT,EAAS8B,GAyBGC,CAAUF,EAAMJ,KAGlB,yBAAKO,MAAO,CAAEC,gBAAiBxC,EAAKY,OAASQ,UAAU,OACrD,uBAAGmB,MAAO,CAAEE,OAAQ,IAAMzC,EAAKA,MAC/B,4BAAQU,GAAG,SAASoB,QAAS,SAACP,GAAD,OA3BvBb,EA2ByCV,EAAKU,QA1BhEH,EAASD,EAAMoC,QAAO,SAAC1C,GAAD,OAAUA,EAAKU,KAAOA,MAD3B,IAACA,IA2BN,aC9DIiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1211b8b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Draggable from \"react-draggable\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nvar randomColor = require(\"randomcolor\");\r\n\r\nfunction App() {\r\n  const [item, setItem] = useState(\"\");\r\n  const [items, setItems] = useState(\r\n    JSON.parse(localStorage.getItem(\"items\")) || []\r\n  );\r\n\r\n  const newitem = () => {\r\n    if (item.trim() !== \"\") {\r\n      const newitem = {\r\n        id: uuidv4(),\r\n        item: item,\r\n        color: randomColor({\r\n          luminosity: \"light\",\r\n        }),\r\n        defaultPos: { x: 100, y: 0 },\r\n      };\r\n      setItems((items) => [...items, newitem]);\r\n      setItem(\"\");\r\n    } else {\r\n      alert(\"Enter a item\");\r\n      setItem(\"\");\r\n    }\r\n  };\r\n\r\n  const keyPress = (event) => {\r\n    var code = event.keyCode || event.which;\r\n    if (code === 13) {\r\n      newitem();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"items\", JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  const updatePos = (data, index) => {\r\n    let newArr = [...items];\r\n    newArr[index].defaultPos = { x: data.x, y: data.y };\r\n    setItems(newArr);\r\n  };\r\n\r\n  const deleteNote = (id) => {\r\n    setItems(items.filter((item) => item.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"new-item\">\r\n        <input\r\n          value={item}\r\n          onChange={(e) => setItem(e.target.value)}\r\n          placeholder=\"Enter something...\"\r\n          onKeyPress={(e) => keyPress(e)}\r\n        />\r\n        <button onClick={newitem}>ENTER</button>\r\n      </div>\r\n      <div id=\"items\">\r\n        {items.map((item, index) => {\r\n          return (\r\n            <Draggable\r\n              key={item.id}\r\n              defaultPosition={item.defaultPos}\r\n              onStop={(e, data) => {\r\n                updatePos(data, index);\r\n              }}\r\n            >\r\n              <div style={{ backgroundColor: item.color }} className=\"box\">\r\n                <p style={{ margin: 0 }}>{item.item}</p>\r\n                <button id=\"delete\" onClick={(e) => deleteNote(item.id)}>\r\n                  X\r\n                </button>\r\n              </div>\r\n            </Draggable>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}